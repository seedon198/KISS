; JTAG PIO program for KISS Fuzzer
; Implements JTAG bit-banging with configurable clock frequency
; 
; Pin assignments:
; - TCK (clock): side-set pin
; - TMS (mode select): OUT pin 0
; - TDI (data in): OUT pin 1  
; - TDO (data out): IN pin 0

.program jtag_clock
.side_set 1

; Simple clock generation program
; Clock pin is controlled via side-set
public start:
    nop         side 0  ; TCK low
    nop         side 1  ; TCK high

.program jtag_shift
.side_set 1

; Shift data program - shifts out TDI/TMS while capturing TDO
; X register contains bit count
; Y register contains TMS/TDI data (bit 0 = TMS, bit 1 = TDI)
; Returns shifted data in ISR

public shift_loop:
    out pins, 2     side 0  ; Output TMS and TDI, TCK low
    in pins, 1      side 1  ; Sample TDO, TCK high
    jmp x--, shift_loop     ; Decrement count and loop
    
.program jtag_reset
.side_set 1

; Reset TAP to Test-Logic-Reset state
; Send 5 clock cycles with TMS high
public reset_loop:
    set pins, 1     side 0  ; TMS high, TDI don't care, TCK low
    nop             side 1  ; TCK high
    jmp reset_loop          ; Loop forever (stopped externally)

.program jtag_idle
.side_set 1

; Move TAP to Run-Test/Idle state
; Send 1 clock cycle with TMS low
public idle_pulse:
    set pins, 0     side 0  ; TMS low, TDI don't care, TCK low  
    nop             side 1  ; TCK high

% c-sdk {
#include "hardware/clocks.h"

static inline void jtag_clock_program_init(PIO pio, uint sm, uint offset, uint tck_pin) {
    pio_sm_config c = jtag_clock_program_get_default_config(offset);
    
    // Configure side-set for TCK pin
    sm_config_set_sideset_pins(&c, tck_pin);
    
    // Set clock divider for desired frequency
    // Default to ~1MHz (125MHz / 125 = 1MHz)
    sm_config_set_clkdiv(&c, 125.0f);
    
    // Configure TCK as output
    pio_gpio_init(pio, tck_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, tck_pin, 1, true);
    
    // Initialize and start the state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void jtag_shift_program_init(PIO pio, uint sm, uint offset, 
                                          uint tck_pin, uint tms_pin, uint tdi_pin, uint tdo_pin) {
    pio_sm_config c = jtag_shift_program_get_default_config(offset);
    
    // Configure side-set for TCK
    sm_config_set_sideset_pins(&c, tck_pin);
    
    // Configure OUT pins for TMS and TDI
    sm_config_set_out_pins(&c, tms_pin, 2);
    
    // Configure IN pins for TDO
    sm_config_set_in_pins(&c, tdo_pin);
    
    // Configure shift direction
    sm_config_set_out_shift(&c, false, true, 32);  // Shift right, autopull
    sm_config_set_in_shift(&c, false, true, 32);   // Shift right, autopush
    
    // Set clock divider
    sm_config_set_clkdiv(&c, 125.0f);  // 1MHz default
    
    // Initialize GPIO
    pio_gpio_init(pio, tck_pin);
    pio_gpio_init(pio, tms_pin);
    pio_gpio_init(pio, tdi_pin);
    pio_gpio_init(pio, tdo_pin);
    
    // Set pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, tck_pin, 1, true);   // TCK output
    pio_sm_set_consecutive_pindirs(pio, sm, tms_pin, 1, true);   // TMS output
    pio_sm_set_consecutive_pindirs(pio, sm, tdi_pin, 1, true);   // TDI output
    pio_sm_set_consecutive_pindirs(pio, sm, tdo_pin, 1, false);  // TDO input
    
    // Initialize and start
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void jtag_reset_program_init(PIO pio, uint sm, uint offset,
                                          uint tck_pin, uint tms_pin) {
    pio_sm_config c = jtag_reset_program_get_default_config(offset);
    
    // Configure side-set for TCK
    sm_config_set_sideset_pins(&c, tck_pin);
    
    // Configure SET pins for TMS
    sm_config_set_set_pins(&c, tms_pin, 1);
    
    // Set clock divider
    sm_config_set_clkdiv(&c, 125.0f);
    
    // Initialize GPIO
    pio_gpio_init(pio, tck_pin);
    pio_gpio_init(pio, tms_pin);
    
    // Set pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, tck_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, tms_pin, 1, true);
    
    // Initialize and start
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void jtag_idle_program_init(PIO pio, uint sm, uint offset,
                                         uint tck_pin, uint tms_pin) {
    pio_sm_config c = jtag_idle_program_get_default_config(offset);
    
    // Configure side-set for TCK
    sm_config_set_sideset_pins(&c, tck_pin);
    
    // Configure SET pins for TMS
    sm_config_set_set_pins(&c, tms_pin, 1);
    
    // Set clock divider
    sm_config_set_clkdiv(&c, 125.0f);
    
    // Initialize GPIO
    pio_gpio_init(pio, tck_pin);
    pio_gpio_init(pio, tms_pin);
    
    // Set pin directions  
    pio_sm_set_consecutive_pindirs(pio, sm, tck_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, tms_pin, 1, true);
    
    // Initialize and start
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
